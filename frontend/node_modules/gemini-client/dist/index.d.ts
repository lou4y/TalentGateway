/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import * as tls from "node:tls";
import { Buffer } from "node:buffer";
type Enumerate<N extends number, Acc extends number[] = []> = Acc["length"] extends N ? Acc[number] : Enumerate<N, [...Acc, Acc["length"]]>;
type IntRange<F extends number, T extends number> = Exclude<Enumerate<T>, Enumerate<F>>;
export type GeminiStatusCodes = IntRange<10, 99>;
export type Headers = {
    /** A two-digit numeric status code */
    statusCode: GeminiStatusCodes;
    /** A string asociated to the status code */
    meta: string;
};
export type Response = {
    /** The hostname obtained from the passed URL */
    hostname: string;
    /** The path obtained from the passed URL */
    path: string;
    /** The server IP address */
    address: string;
    /** The port in which the server responded to the request  */
    port: number;
    /** The headers parsed from the server response */
    headers?: Partial<Headers>;
    /** The raw headers obtained from the server response */
    rawHeaders?: Buffer;
    /** The body obtained from the server response */
    body?: Buffer;
    /** The server certificate */
    certificate?: Buffer;
};
/**
 * A Gemini protocol client
 *
 * @remarks
 * ```
 * If the url passed has a port defined then that\'s the one used instead of the opts one. (Default value: 1965)
 * Default timeout: 60 sec.
 * ```
 *
 * @example
 * ```
 * import client from 'gemini-client';
 *
 * const req = client('gemini://gemini.circumlunar.space/');
 * const res = await req;
 * console.log(res);
 * ```
 *
 * @param url - the url to request
 * @param opts - request options which are used in the tls connection
 * @returns a promise with a {@link Response} object
 */
declare function client(url: string, opts: Partial<tls.ConnectionOptions>): Promise<Response>;
export { client };
export default client;
