import*as p from"tls";import{Buffer as n}from"buffer";var f=class extends Error{constructor(o){super(o)}},c=`\r
`;async function l(u,s){let o=new URL(u),t={hostname:o.hostname,path:o.pathname},r=p.connect({minVersion:"TLSv1.2",host:o.hostname,servername:o.hostname,port:parseInt(o.port,10)||s.port||1965,rejectUnauthorized:!1,timeout:s.timeout||60*1e3,...s});r.once("timeout",()=>{let e=new f("connect timeout");return e.timeout=s.timeout,e.code="ETIMEDOUT",e.errno=-60,r.destroy(e),e}),r.on("connect",()=>t.port=r.remotePort),r.on("lookup",(e,m,d,g)=>t.address=m),r.on("keylog",e=>t.certificate=r.getPeerCertificate(!0).raw),r.write(`${u}\r
`);let a=n.from([]),i=n.from([]),h=0;for await(let e of r)if(t.headers)a=n.concat([a,n.from(e)]);else if(i=n.concat([i,e]),i.includes(c)){let m=i.subarray(0,i.indexOf(c)+c.length);a=n.concat([a,n.from(e.subarray(e.indexOf(c)+c.length))]),t.rawHeaders=n.from(m),t.headers={};let d=m.toString().split(/[\t ]/);d.length>1&&(t.headers={statusCode:parseInt(d[0].trim(),10),meta:d.slice(1).join(" ").trim()})}return t.body=a,t}var y=l;export{l as client,y as default};
